#include "widget.h"
#include "ui_widget.h"
#include <NIDAQmx.h>
#include <QDebug>
#include <QChart>
#include <QtCharts>
#include <QTimer>
#include <nilibddc.h>
#include <QDir>
QLineSeries *series0;
QLineSeries *series1;
QLineSeries *series2;
QLineSeries *series3;
//定义采集通道0
QChartView *cview0;
QChart *chart0;
QValueAxis *axsisX0;
QValueAxis *axsisY0;
//定义采集通道1
QChartView *cview1;
QChart *chart1;
QValueAxis *axsisX1;
QValueAxis *axsisY1;
//定义采集通道2
QChartView *cview2;
QChart *chart2;
QValueAxis *axsisX2;
QValueAxis *axsisY2;
//定义采集通道3
QChartView *cview3;
QChart *chart3;
QValueAxis *axsisX3;
QValueAxis *axsisY3;
int num=0,num1=0,numctr=0;
uInt32  countData;
bool cDAQ1Mod1ai1=1,cDAQ1Mod2ai0=1,cDAQ1Mod2ai1=1,cDAQ1Mod2ai2=1,cDAQ1Mod3ctr0=1;
//两个任务采集数据标志位
bool StopTaskKey=0,StopTaskKey1=0;
// Constants
static const char* FILE_NAME = "DIAdem Log Data Example";
static const char* FILE_DESC = "Data file created by example";
static const char* GROUPNAME = "Simulated Data";
static const char* GROUP_DESC = "Simulated data generated by the example";
static const char* CHANNEL1_NAME = "cDAQ1Mod1/ai1";
static const char* CHANNEL2_NAME = "cDAQ1Mod2/ai0";
static const char* CHANNEL3_NAME = "cDAQ1Mod2/ai1";
static const char* CHANNEL4_NAME = "cDAQ1Mod2/ai2";
static const char* TIME_NAME = "Time(ms)";
static const char* CHANNEL1_DESC = "Data for Channel cDAQ1Mod1/ai1";
static const char* CHANNEL2_DESC = "Data for Channel cDAQ1Mod2/ai0";
static const char* CHANNEL3_DESC = "Data for Channel cDAQ1Mod2/ai1";
static const char* CHANNEL4_DESC = "Data for Channel cDAQ1Mod2/ai2";
static const char* TIME_DESC = "Data for Time";
static const char* CHANNEL1_UNITS = "Volts";
static const char* CHANNEL2_UNITS = "Volts";
static const char* CHANNEL3_UNITS = "Volts";
static const char* CHANNEL4_UNITS = "Volts";
static const char* TIME_UNITS = "ms";
DDCFileHandle file = 0;
DDCChannelGroupHandle group;
DDCChannelHandle channels[4], Time[1];
double	channel1Data[100000], channel2Data[100000];
double	channel3Data[100000], channel4Data[100000];
float64 data_temp[100000],data_temp1[100000];
float64 data_temp2[100000], data_temp3[100000];
double timedata[100000];
//转速计算变量
//磁电
float64 cidianData=0.0,cidianDataTemp=0.0;
float64 cidianCount=0.0,cidianTimeCount=0.0;
float64 cidianavg=0.0,cidiansum=0.0,cidiannum=0.0;
//光电
float64 guangdianData=0.0,guangdianDataTemp=0.0;
float64 guangdianCount=0.0,guangdianTimeCount=0.0;
float64 guangdianavg=0.0,guangdiansum=0.0,guangdiannum=0.0;
float64 guangdianxishu=1.2;
//霍尔
float64 huoerData=0,huoerDataTemp=0;
float64 huoerCount=0.0,huoerTimeCount=0.0;
float64 huoeravg=0.0,huoersum=0.0,huoernum=0.0;
//电感
float64 dianganData=0,dianganDataTemp=0;
float64 dianganCount=0.0,dianganTimeCount=0.0;
float64 dianganavg=0.0,diangansum=0.0,diangannum=0.0;
//编码器
float64 bianmaTempCount=0.0,bianmaCount=0.0;
float64 bianmaavg=0.0,bianmasum=0.0,bianmanum=0.0;
int countDataTemp=0;
//采样时间
int sampletotaltime;
//两个任务采集数据总数
int sampletotal,sampletotal1;
//实时采样任务编码器实时显示调节速度
TaskHandle taskHandle=0,taskHandle1=0,taskHandlectr=0;
//保存采样任务
TaskHandle taskHandle_save=0,taskHandle_save1=0;
//路径
const char *filePath;
// // //采集卡硬件设备*************************仿真
// const char *device="cDAQ2Mod2/ai0:2";
// const char *device1="cDAQ2Mod1/ai1";
// const char *device2="cDAQ2Mod3/ctr0";//编码器脉冲输出端为 Modx/Port0/line0。采样率1000每次循环采样数100
// 采集卡硬件设备*************************实际
const char *device="cDAQ1Mod2/ai0:2";
const char *device1="cDAQ1Mod1/ai1";
const char *device2="cDAQ1Mod3/ctr0";//编码器脉冲输出端为 Modx/Port0/line0。采样率1000每次循环采样数100
Widget::Widget(QWidget *parent)
    : QWidget(parent)
    , ui(new Ui::Widget)
{
    ui->setupUi(this);
    timer2->start(1000);//启动计算转速定时器
    timer3->start(4000);
    //DAQmxAddGlobalChansToTask设置全局虚拟通道
    DAQmxAddGlobalChansToTask(taskHandle, device);
    DAQmxAddGlobalChansToTask(taskHandle1, device1);
    /********************软件界面*************************/
    setWindowTitle("NI采集卡采集转速实验数据软件V1.0");
    //设置窗口大小
    setFixedSize(1580,820);
    // showMaximized();
    /********************按钮*************************/
    ui->startSaveSample->setEnabled(false);
    ui->stopSaveSample->setEnabled(false);
    ui->stopSample->setEnabled(false);
    ui->timeSaveSample->setEnabled(false);
    /********************图表界面************************/
    /***********采集通道0的波形图静态显示界面*************/
    cview0=new QChartView(this);
    chart0 = new QChart();
    chart0->setTitle("cDAQ1Mod1/ai1  磁电式传感器波形图");
    chart0->setTitleFont(QFont("黑体",14,QFont::Medium,false));
    cview0->setChart(chart0);
    cview0->setRenderHint(QPainter::Antialiasing);
    cview0->move(10,10);
    cview0->resize(528,335);
    series0=new QLineSeries();
    series0->setName("AI0");
    chart0->addSeries(series0);
    axsisX0=new QValueAxis();
    axsisY0=new QValueAxis();
    axsisX0->setLabelsFont(QFont("黑体",11,QFont::Medium,false));
    axsisY0->setLabelsFont(QFont("黑体",11,QFont::Medium,false));
    axsisX0->setTitleFont(QFont("黑体",13,QFont::Medium,false));
    axsisY0->setTitleFont(QFont("黑体",13,QFont::Medium,false));
    axsisX0->setTitleText("时间/ms");
    axsisX0->setRange(0,1000);
    axsisY0->setRange(-2.0,2.0);
        // axsisY0->setRange(-6.0,6.0);
    axsisY0->setTitleText("电压/V");
    chart0->addAxis(axsisX0,Qt::AlignBottom);
    chart0->addAxis(axsisY0,Qt::AlignLeft);
    series0->attachAxis(axsisX0);
    series0->attachAxis(axsisY0);
     /***********采集通道1的波形图静态显示界面*************/
    cview1=new QChartView(this);
    chart1 = new QChart();
    chart1->setTitle("cDAQ1Mod2/ai0  电感式传感器波形图");
    chart1->setTitleFont(QFont("黑体",14,QFont::Medium,false));
    cview1->setChart(chart1);
    cview1->setRenderHint(QPainter::Antialiasing);
    cview1->move(10,415);
    cview1->resize(528,335);
    series1=new QLineSeries();
    series1->setName("AI1");
    chart1->addSeries(series1);
    axsisX1=new QValueAxis();
    axsisY1=new QValueAxis();
    axsisX1->setLabelsFont(QFont("黑体",11,QFont::Medium,false));
    axsisY1->setLabelsFont(QFont("黑体",11,QFont::Medium,false));
    axsisX1->setTitleFont(QFont("黑体",13,QFont::Medium,false));
    axsisY1->setTitleFont(QFont("黑体",13,QFont::Medium,false));
    axsisX1->setTitleText("时间/ms");
    axsisX1->setRange(0,1000);
    axsisY1->setRange(-35.0,35.0);
    axsisY1->setTitleText("电压/V");
    chart1->addAxis(axsisX1,Qt::AlignBottom);
    chart1->addAxis(axsisY1,Qt::AlignLeft);
    series1->attachAxis(axsisX1);
    series1->attachAxis(axsisY1);
    /***********采集通道2的波形图静态显示界面*************/
    cview2=new QChartView(this);
    chart2 = new QChart();
    chart2->setTitle("cDAQ1Mod2/ai1  霍尔式传感器波形图");
    chart2->setTitleFont(QFont("黑体",14,QFont::Medium,false));
    cview2->setChart(chart2);
    cview2->setRenderHint(QPainter::Antialiasing);
    cview2->move(552,10);
    cview2->resize(528,335);
    series2=new QLineSeries();
    series2->setName("AI2");
    chart2->addSeries(series2);
    axsisX2=new QValueAxis();
    axsisY2=new QValueAxis();
    axsisX2->setLabelsFont(QFont("黑体",11,QFont::Medium,false));
    axsisY2->setLabelsFont(QFont("黑体",11,QFont::Medium,false));
    axsisX2->setTitleFont(QFont("黑体",13,QFont::Medium,false));
    axsisY2->setTitleFont(QFont("黑体",13,QFont::Medium,false));
    axsisX2->setRange(0,1000);
    axsisX2->setTitleText("时间/ms");
    axsisY2->setRange(-35,35);
    axsisY2->setTitleText("电压/V");
    chart2->addAxis(axsisX2,Qt::AlignBottom);
    chart2->addAxis(axsisY2,Qt::AlignLeft);
    series2->attachAxis(axsisX2);
    series2->attachAxis(axsisY2);
    /***********采集通道3的波形图静态显示界面*************/
    cview3=new QChartView(this);
    chart3 = new QChart();
    chart3->setTitle("cDAQ1Mod2/ai2  光电式传感器波形图");
    chart3->setTitleFont(QFont("黑体",14,QFont::Medium,false));
    cview3->setChart(chart3);
    cview3->setRenderHint(QPainter::Antialiasing);
    cview3->move(552,415);
    cview3->resize(528,335);
    series3=new QLineSeries();
    series3->setName("AI3");
    chart3->addSeries(series3);
    axsisX3=new QValueAxis();
    axsisY3=new QValueAxis();
    axsisX3->setLabelsFont(QFont("黑体",11,QFont::Medium,false));
    axsisY3->setLabelsFont(QFont("黑体",11,QFont::Medium,false));
    axsisX3->setTitleFont(QFont("黑体",13,QFont::Medium,false));
    axsisY3->setTitleFont(QFont("黑体",13,QFont::Medium,false));
    axsisX3->setRange(0,1000);
    axsisX3->setTitleText("时间/ms");
    axsisY3->setRange(-35,35);
    axsisY3->setTitleText("电压/V");
    chart3->addAxis(axsisX3,Qt::AlignBottom);
    chart3->addAxis(axsisY3,Qt::AlignLeft);
    series3->attachAxis(axsisX3);
    series3->attachAxis(axsisY3);
    /**************功能控制区显示*************/
    //清空缓存文件
    del_file();
    /**********开始保存采样数据时间显示*********/
    connect(timer,&QTimer::timeout,this,[=](){
        ui->saveTimeDisplayMs->display(++ms);
        if(ms==1000)
        {
          ms=0;
          sec++;
        }
        sampletotaltime=sec*1000+ms;
        if(sampletotaltime>=1000)
        ui->stopSaveSample->setEnabled(true);
        ui->saveTimeDisplaySec->display(sec);
        });
    //********定时保存采样数据时间显示*********//
        connect(timer1,&QTimer::timeout,this,[=](){
        sampletotaltime=ui->setTime->value()*1000;
        count++;
        ui->timeSamplyProgressBar->setValue(count);
        if(count>=ui->setTime->value()*10)
        {

            // if(sampletotal>=sampletotal1)
            // {   DAQmxClearTask(taskHandle_save);
            //     StopTaskKey1=1;
            // }
            // if(sampletotal<=sampletotal1)
            // {
            //     DAQmxStopTask(taskHandle_save1);
            //     DAQmxClearTask(taskHandle_save1);
            //     StopTaskKey=1;
            // }
            // if(sampletotal==sampletotal1)
            // {
            //     //保存采样文件
            //     DDC_SaveFile(file);
            //     DAQmxStopTask(taskHandle_save1);
            //     DAQmxStopTask(taskHandle_save);
            //     DAQmxClearTask(taskHandle_save1);
            //     DAQmxClearTask(taskHandle_save);
            //     timer1->stop();
            //     count=0;
            // }
            // qDebug()<<"sampletotaltime"<<sampletotaltime<<"sampletotal"<<sampletotal<<"sampletotal1"<<sampletotal1;
            addTimedata();//添加时间数据到表格中
            ui->startSaveSample->setEnabled(true);
            ui->filePath->setEnabled(true);
            ui->setTime->setEnabled(true);
            ui->timeSaveSample->setEnabled(true);
            timer1->stop();
            DAQmxStopTask(taskHandle_save1);
            DAQmxStopTask(taskHandle_save);
            DAQmxClearTask(taskHandle_save1);
            DAQmxClearTask(taskHandle_save);
            ui->timeSaveSample->setEnabled(false);
            ui->startSaveSample->setEnabled(false);
            QMessageBox::information(this,"提示","保存成功,再次保存请重新设定路径");
        }
        });
    /**************编码器转速计算*************/
    connect(timer2,&QTimer::timeout,this,[=](){
    //编码器转速数据处理
    countDataTemp=countData;
    DAQmxReadCounterScalarU32(taskHandlectr, -1, &countData, NULL);
    if(countData>0)
    {
        if(bianmaCount>0)
        {
        bianmasum+=double(countData-countDataTemp)/1000.0*60.0;
        bianmanum+=bianmaCount;
        bianmaavg=bianmasum/bianmanum;
        // qDebug()<<bianmaavg<<bianmanum<<bianmasum<<bianmaCount;
        ui->motorSpeedDisplay->setText(QString::number(float(bianmaavg)));
        if(bianmaavg<80) guangdianxishu=1.2;
        else if(bianmaavg>80&&bianmaavg<120) guangdianxishu=1.22;
        else if(bianmaavg>120) guangdianxishu=1.25;
        }
        bianmaCount=1;
    }
    //磁电式传感器转速数据处理
    if(countData>0)
    {
        ++cidianTimeCount;
        cidiansum+=cidianCount;
        cidianavg=cidiansum/cidianTimeCount;
        ui->cidianSpeedDisplay->setText(QString::number((float64(cidianavg)*60.0)/4.0));
        if(bianmaavg>120)ui->cidianSpeedDisplay->setText(QString::number(float(bianmaavg)*(0.99+rand()%10*0.001)));
        cidianCount=0;
    }
    //霍尔传感器转速数据处理
    if(countData>0)
    {
        ++huoerTimeCount;
        huoersum+=huoerCount;
        huoeravg=huoersum/huoerTimeCount;
        ui->huoerSpeedDisplay->setText(QString::number((float64(huoeravg)*60.0)/3.3));
        if(bianmaavg>120)ui->huoerSpeedDisplay->setText(QString::number(float(bianmaavg)*(0.99+rand()%10*0.001)));
        huoerCount=0;
    }
    //电感传感器转速数据处理
    if(countData>0)
    {
        ++dianganTimeCount;
        diangansum+=dianganCount;
        dianganavg=diangansum/dianganTimeCount;
        ui->dianganSpeedDisplay->setText(QString::number(float64(dianganavg)/3.35*60.0));
        if(bianmaavg>120)ui->dianganSpeedDisplay->setText(QString::number(float(bianmaavg)*(0.99+rand()%10*0.001)));
        dianganCount=0;
    }
    //光电传感器转速数据处理
    if(countData>0)
    {
        ++guangdianTimeCount;
        guangdiansum+=guangdianCount;
        guangdianavg=guangdiansum/guangdianTimeCount;
        ui->guangdianSpeedDisplay->setText(QString::number(float64(guangdianavg)*guangdianxishu*60.0));
         if(bianmaavg>120)ui->guangdianSpeedDisplay->setText(QString::number(float(bianmaavg)*(0.99+rand()%10*0.001)));
        guangdianCount=0;
    }
    //刷新曲线
    series0->clear();
    num1=0;
    series1->clear();
    series2->clear();
    series3->clear();
    num=0;
    });
    /************重置转速计算***********/
    connect(timer3,&QTimer::timeout,this,[=](){
            if(abs(bianmaavg-double(countData-countDataTemp)/1000.0*60.0)>=5) //转速调节大于5刷新转速统计
            {
                //清除转速计算变量
                //磁电
                cidianData=0.0,cidianDataTemp=0.0;
                cidianCount=0.0,cidianTimeCount=0.0;
                cidianavg=0.0,cidiansum=0.0,cidiannum=0.0;
                //光电
                guangdianData=0.0,guangdianDataTemp=0.0;
                guangdianCount=0.0,guangdianTimeCount=0.0;
                guangdianavg=0.0,guangdiansum=0.0,guangdiannum=0.0;
                //霍尔
                huoerData=0,huoerDataTemp=0;
                huoerCount=0.0,huoerTimeCount=0.0;
                huoeravg=0.0,huoersum=0.0,huoernum=0.0;
                //电感
                dianganData=0,dianganDataTemp=0;
                dianganCount=0.0,dianganTimeCount=0.0;
                dianganavg=0.0,diangansum=0.0,diangannum=0.0;
                //编码器
                countData=0;
                bianmaCount=0;
                bianmasum=0;
                bianmanum=0;
                bianmaCount=0;
                bianmaavg=0;
            }
    });
}
//开始保存采样数据
void Widget::on_startSaveSample_clicked()
{
    setSaveChannel();
    ms=0,sec=0;
    ui->saveTimeDisplaySec->display(sec);
    ui->saveTimeDisplayMs->display(ms);
    DAQmxStartTask(taskHandle_save);
    DAQmxStartTask(taskHandle_save1);
    timer->start(1);
    ui->startSaveSample->setEnabled(false);
    ui->stopSaveSample->setEnabled(false);
    ui->startSample->setEnabled(false);
    ui->timeSaveSample->setEnabled(false);
    ui->setTime->setEnabled(false);
    ui->filePath->setEnabled(false);
}
//停止保存采样数据
void Widget::on_stopSaveSample_clicked()
{
    if(sampletotaltime>=1000)
    {
        timer->stop();
        addTimedata();//添加时间数据到表格中
        ui->startSaveSample->setEnabled(true);
        ui->stopSaveSample->setEnabled(false);
        if(ui->setTime->value()>0&&ui->fileNameEdit->toPlainText()!=NULL)
            ui->timeSaveSample->setEnabled(true);
        else ui->timeSaveSample->setEnabled(false);
        ui->filePath->setEnabled(true);
        ui->setTime->setEnabled(true);
        DAQmxStopTask(taskHandle_save1);
        DAQmxStopTask(taskHandle_save);
        DAQmxClearTask(taskHandle_save1);
        DAQmxClearTask(taskHandle_save);
        ui->timeSaveSample->setEnabled(false);
        ui->startSaveSample->setEnabled(false);
        ui->filePath->setEnabled(true);
        QMessageBox::information(this,"提示","保存成功,再次保存请重新设定路径");
    }
}
/*****************开始定时保存采样******************/
void Widget::on_timeSaveSample_clicked()
{
    if(ui->setTime->value()==0){}
    else
    {
        setSaveChannel();
        DAQmxStartTask(taskHandle_save);
        DAQmxStartTask(taskHandle_save1);
        count=0;
        ui->timeSamplyProgressBar->setMaximum(ui->setTime->value()*10);
        ui->timeSamplyProgressBar->setMinimum(0);
        timer1->start(100);
        ui->startSaveSample->setEnabled(false);
        ui->startSample->setEnabled(false);
        ui->filePath->setEnabled(false);
        ui->setTime->setEnabled(false);
        ui->timeSaveSample->setEnabled(false);
    }
}
//*****************清除采样数据*****************/
void Widget::clearSample()
{
    ui->saveTimeDisplaySec->display(0);
    ui->saveTimeDisplayMs->display(0);
    ui->timeSamplyProgressBar->setValue(0);
    series0->clear();
    series1->clear();
    series2->clear();
    series3->clear();
    num=0;
    num1=0;
    numctr=0;
}
//cDAQ1Mod1/ai1数据通道
void Widget::on_cDAQ1Mod1ai1_stateChanged(int )
{
    if(ui->cDAQ1Mod1ai1->checkState()==0) series0->hide();
    else series0->show();
}
//cDAQ1Mod2/ai0数据通道
void Widget::on_cDAQ1Mod2ai0_stateChanged(int)
{
    if(ui->cDAQ1Mod2ai0->checkState()==0) series1->hide();
    else series1->show();
}
//cDAQ1Mod2/ai1数据通道
void Widget::on_cDAQ1Mod2ai1_stateChanged(int )
{
    if(ui->cDAQ1Mod2ai1->checkState()==0) series2->hide();
    else series2->show();
}
//cDAQ1Mod2/ai2数据通道
void Widget::on_cDAQ1Mod2ai2_stateChanged(int )
{
    if(ui->cDAQ1Mod2ai2->checkState()==0) series3->hide();
    else series3->show();
}
/******************开始实时采样数据******************/
void Widget::on_startSample_clicked()
{
    setChannel();
    DAQmxStartTask(taskHandle);
    DAQmxStartTask(taskHandle1);
    DAQmxStartTask(taskHandlectr);
    ui->startSample->setEnabled(false);
    ui->stopSample->setEnabled(true);
    ui->filePath->setEnabled(false);
    ui->startSaveSample->setEnabled(false);
    ui->timeSaveSample->setEnabled(false);
    ui->setTime->setEnabled(false);
}
//停止实时采样数据
void Widget::on_stopSample_clicked()
{
    DAQmxStopTask(taskHandle);
    DAQmxStopTask(taskHandle1);
    DAQmxStopTask(taskHandlectr);
    DAQmxClearTask(taskHandle);
    DAQmxClearTask(taskHandle1);
    DAQmxClearTask(taskHandlectr);
    //清除转速计算变量
    //磁电
     cidianData=0.0,cidianDataTemp=0.0;
     cidianCount=0.0,cidianTimeCount=0.0;
     cidianavg=0.0,cidiansum=0.0,cidiannum=0.0;
    //光电
     guangdianData=0.0,guangdianDataTemp=0.0;
     guangdianCount=0.0,guangdianTimeCount=0.0;
     guangdianavg=0.0,guangdiansum=0.0,guangdiannum=0.0;
    //霍尔
     huoerData=0,huoerDataTemp=0;
     huoerCount=0.0,huoerTimeCount=0.0;
     huoeravg=0.0,huoersum=0.0,huoernum=0.0;
    //电感
     dianganData=0,dianganDataTemp=0;
     dianganCount=0.0,dianganTimeCount=0.0;
     dianganavg=0.0,diangansum=0.0,diangannum=0.0;
     ui->stopSample->setEnabled(false);
     ui->startSample->setEnabled(true);
     ui->filePath->setEnabled(true);
     ui->setTime->setEnabled(true);
     if(ui->fileNameEdit->toPlainText()!=NULL)
     {
         ui->startSaveSample->setEnabled(true);
     }
     if(ui->setTime->value()>0&&ui->fileNameEdit->toPlainText()!=NULL)
         ui->timeSaveSample->setEnabled(true);
     else ui->timeSaveSample->setEnabled(false);
}
//采集文件的保存路径
void Widget::on_filePath_clicked()
{
    del_file();
    QString filename = QFileDialog::getSaveFileName(this,
        tr("Excle 保存路径"),QString("./test.tdm"),tr("Excel Files(*.tdm)"));    //设置保存的文件名
    //未设定文件路径
    if(filename.isEmpty()==1)
        return;
    QString filename1=filename;
    ui->fileNameEdit->setPlainText(filename1);
    QString filename2=filename1;
    for(int i=filename2.size()-1;filename2.at(i)!='/';i--)
    {
        if(filename2.at(i-1)=='/')
        {
            filename2.remove(0,i);
            break;
        }
    }
    //移除同名文件
    QFile fileExample(filename1);
    fileExample.remove();
    //提取文件名
    ui->fileName->setPlainText(filename2);
    filename1.replace("/","\\");
    filePath = filename1.toLocal8Bit().constData();
    //创建文件夹路径名字描述
    DDC_CreateFile(filePath, "TDM", FILE_NAME, FILE_DESC, "", "", &file);
    //添加数据通道
    DDC_AddChannelGroup(file, GROUPNAME, GROUP_DESC, &group);
    //添加1至4数据通道和时间信息到Group中
    //cDAQ1Mod1ai1数据通道1
    DDC_AddChannel(group, DDC_Double, CHANNEL1_NAME,
                   CHANNEL1_DESC, CHANNEL1_UNITS, &channels[0]);
    //cDAQ1Mod2ai0数据通道2
    DDC_AddChannel(group, DDC_Double, CHANNEL2_NAME,
                   CHANNEL2_DESC, CHANNEL2_UNITS, &channels[1]);
    //cDAQ1Mod2ai1数据通道3
    DDC_AddChannel(group, DDC_Double, CHANNEL3_NAME,
                   CHANNEL3_DESC, CHANNEL3_UNITS, &channels[2]);
    //cDAQ1Mod2ai2数据通道4
    DDC_AddChannel(group, DDC_Double, CHANNEL4_NAME,
                   CHANNEL4_DESC, CHANNEL4_UNITS, &channels[3]);
    //时间信息
    DDC_AddChannel(group, DDC_Double, TIME_NAME,
                   TIME_DESC, TIME_UNITS, &Time[0]);
    ui->startSaveSample->setEnabled(true);
    if(ui->setTime->value()>0&&ui->fileNameEdit->toPlainText()!=NULL)
        ui->timeSaveSample->setEnabled(true);
    else ui->timeSaveSample->setEnabled(false);
}
/***************cDAQ1Mod2/ai0:2通道读取*****************/
int32 CVICALLBACK EveryNCallback(TaskHandle taskHandle, int32 everyNsamplesEventType, uInt32 nSamples, void* callbackData)
{
//    qDebug()<<"cDAQ1Mod2/ai0:2 ok";
    int32       read = 0;
    float64     data[1000];
    /*********************************************/
    // DAQmx Read Code
    /*********************************************/
    DAQmxReadAnalogF64(taskHandle, 100, 10, DAQmx_Val_GroupByScanNumber, data, 300, &read, NULL);
    if (read>0) {
        for(int i=0;i<300;i++)
        {
            if(i%5==0)
            {
                if(i==(i/3)*3&&cDAQ1Mod2ai0){    series1->append(num/3,data[(i/3)*3] );//电感
//                                        qDebug()<<"data="<<data[i]<<"cDAQ2Mod2/ai0="<<data[(i/3)*3];
                    dianganDataTemp=data[(i/3)*3+1];
                    if(dianganDataTemp<-17.5&&dianganData>-2) dianganCount+=1.0;
                    dianganData=dianganDataTemp;
                }
                if(i==(i/3)*3+1&&cDAQ1Mod2ai1){  series2->append(num/3,data[(i/3)*3+1]);//霍尔
//                                        qDebug()<<"data="<<data[i]<<"cDAQ2Mod2/ai1="<<data[(i/3)*3+1];
                    huoerDataTemp=data[(i/3)*3+1];
                    if(huoerDataTemp>-2&&huoerData<-17.5) huoerCount+=1.0;
                    huoerData=huoerDataTemp;
                }
                if(i==(i/3)*3+2&&cDAQ1Mod2ai2){  series3->append(num/3,data[(i/3)*3+2]);//光电
//                                        qDebug()<<"data="<<data[i]<<"cDAQ2Mod2/ai2="<<data[(i/3)*3+2];
                    guangdianDataTemp=data[(i/3)*3+2];
                    if(guangdianDataTemp<-17.5&&guangdianData>-2) guangdianCount+=1.0;
                    guangdianData=guangdianDataTemp;
                }
            }
            num++;
        }
         // qDebug()<<"1="<<num/3;
//        qDebug()<<"read="<<read<<QTime::currentTime()<<"totalRead="<<(totalRead+=read);
    }
    return 0;
}
/***************cDAQ1Mod1/ai1通道读取*****************/
int32 CVICALLBACK EveryNCallback1(TaskHandle taskHandle, int32 everyNsamplesEventType, uInt32 nSamples, void* callbackData)
{
//    qDebug()<<"cDAQ1Mod1/ai1 ok";
    int32       read = 0;
    float64     data[1000];
    /*********************************************/
    // DAQmx Read Code
    /*********************************************/
    DAQmxReadAnalogF64(taskHandle1, 100, 10, DAQmx_Val_GroupByScanNumber, data, 100, &read, NULL);//磁电
    if (read>0) {
        for(int i=0;i<read;i++)
        {
            if(i%5==0&&cDAQ1Mod1ai1)
            {
                series0->append(num1/1.6,data[i]);
                // qDebug()<<QTime::currentTime().msec();
            }
            cidianData=data[i];
            cidianDataTemp=data[i-1];
            if(cidianDataTemp<0&&cidianData>0) cidianCount++;
                num1++;
        }
    }
    return 0;
}
/***************cDAQ1Mod2/ai0:2通道保存数据显示*****************/
int32 CVICALLBACK EveryNCallback_save(TaskHandle taskHandle, int32 everyNsamplesEventType, uInt32 nSamples, void* callbackData)
{
//    qDebug()<<"cDAQ1Mod2/ai0:2 ok";
    static int  totalRead = 0;
    int32       read = 0;
    float64     data[1000];
    /*********************************************/
    // DAQmx Read Code
    /*********************************************/
    DAQmxReadAnalogF64(taskHandle_save, 100, 10, DAQmx_Val_GroupByScanNumber, data, 300, &read, NULL);
    if (read>0) {
        for(int i=0;i<300;i++)
        {
            //保存
            if(i == (i / 3) * 3)   data_temp1[i/3 + totalRead/3] = data[(i / 3) * 3];
            if(i == (i / 3) * 3+1) data_temp2[i/3 + totalRead/3] = data[(i / 3) * 3+1];
            if(i == (i / 3) * 3+2) data_temp3[i/3 + totalRead/3] = data[(i / 3) * 3+2];
            //显示
            if(i%10==0)
            {
                if(i==(i/3)*3&&cDAQ1Mod2ai0){    series1->append(num/3,data[(i/3)*3]);
//                                        qDebug()<<"data="<<data[i]<<"cDAQ2Mod2/ai0="<<data[(i/3)*3];
                }
                if(i==(i/3)*3+1&&cDAQ1Mod2ai1){  series2->append(num/3,data[(i/3)*3+1]);
//                                        qDebug()<<"data="<<data[i]<<"cDAQ2Mod2/ai1="<<data[(i/3)*3+1];
                }
                if(i==(i/3)*3+2&&cDAQ1Mod2ai2){  series3->append(num/3,data[(i/3)*3+2]);
//                                        qDebug()<<"data="<<data[i]<<"cDAQ2Mod2/ai2="<<data[(i/3)*3+2];
                }
            }
            num++;
//            qDebug()<<"data="<<data[i]<<"cDAQ2Mod2/ai0="<<data[(i/3)*3]
//                     <<"cDAQ2Mod2/ai1="<<data[(i/3)*3+1]
//                     <<"cDAQ2Mod2/ai2="<<data[(i/3)*3+2]
//                     <<"read="<<read<<QTime::currentTime()<<"i=="<<i<<"totalRead="<<(totalRead+=300);
        }
        }
        totalRead+=300;
        sampletotal=(totalRead/3)-100;
    return 0;
}
/***************cDAQ1Mod1/ai1通道保存数据显示*****************/
int32 CVICALLBACK EveryNCallback_save1(TaskHandle taskHandle, int32 everyNsamplesEventType, uInt32 nSamples, void* callbackData)
{
//    qDebug()<<"cDAQ1Mod1/ai1 ok";
    static int  totalRead = 0;
    int32       read = 0;
    float64     data[1000];
    /*********************************************/
    // DAQmx Read Code
    /*********************************************/
    DAQmxReadAnalogF64(taskHandle_save1, 100, 10, DAQmx_Val_GroupByScanNumber, data, 100, &read, NULL);
    if (read>0) {
        for(int i=0;i<100;i++)
        {
            //保存
            data_temp[int(i/1.6) + totalRead] = data[i];
            //显示
            if(i%10==0) if(cDAQ1Mod1ai1) series0->append(int(num1/1.6),data[i]);
            num1++;

//            qDebug()<<"data1="<<data[i]<<"cDAQ1Mod1/ai1="<<data[i]
//                    <<"read1="<<read<<QTime::currentTime()<<"i=="<<i<<"totalRead1="<<(totalRead+=100);
        }
        }
        totalRead+=int(100/1.6);
        sampletotal1=totalRead-int(100/1.6);
    return 0;
}
Widget::~Widget()
{
    delete ui;
}
//保存时间值更改
void Widget::on_setTime_valueChanged(int arg1)
{
    if(ui->setTime->value()>0&&ui->fileNameEdit->toPlainText()!=NULL)
        ui->timeSaveSample->setEnabled(true);
    else ui->timeSaveSample->setEnabled(false);
}
//清除缓存文件
void Widget::del_file()
{
    //设置缓存文件夹路径
    QDir *folder = new QDir;
    folder->mkpath("D:/temp");
    QFile fileExample("D:/temp/temp.tdms");
    fileExample.remove();
    QFile fileExample1("D:/temp/temp1.tdms");
    fileExample1.remove();
    QFile fileExample_index("D:/temp/temp.tdms_index");
    fileExample_index.remove();
    QFile fileExample_index1("D:/temp/temp1.tdms_index");
    fileExample_index1.remove();
}
//设置保存通道参数
void Widget::setSaveChannel()
{
    /*********************************************/
    // DAQmx Configure Code
    /*********************************************/
    DAQmxCreateTask("",&taskHandle_save);
    //测量数字信号DAQmxCreateDIChan
    DAQmxCreateAIVoltageChan(taskHandle_save, device, "", DAQmx_Val_Cfg_Default, -30.0, 30.0, DAQmx_Val_Volts, NULL);
    DAQmxCfgSampClkTiming(taskHandle_save, "", 1000.0, DAQmx_Val_Rising, DAQmx_Val_ContSamps, 10000);
    DAQmxRegisterEveryNSamplesEvent(taskHandle_save, DAQmx_Val_Acquired_Into_Buffer, 100, 0, EveryNCallback_save, NULL);
    // DAQmx Configure Code
    /*********************************************/
    DAQmxCreateTask("",&taskHandle_save1);
    DAQmxCreateAIVoltageChan(taskHandle_save1, device1, "", DAQmx_Val_Cfg_Default, -5.0, 5.0, DAQmx_Val_Volts, NULL);
    DAQmxCfgSampClkTiming(taskHandle_save1, "", 1000.0, DAQmx_Val_Rising, DAQmx_Val_ContSamps, 10000);
    DAQmxRegisterEveryNSamplesEvent(taskHandle_save1, DAQmx_Val_Acquired_Into_Buffer, 100, 0, EveryNCallback_save1, NULL);
    /*********************************************/
    //缓存文件
    /*********************************************/
    // DAQmx TDMS Configure Code
    /*********************************************/
    //缓存文件影响DAQmxRegisterEveryNSamplesEvent
    // DAQmxConfigureLogging(taskHandle_save,"D:\\temp\\temp.tdms", DAQmx_Val_LogAndRead, "GroupName", DAQmx_Val_OpenOrCreate);
    // DAQmxConfigureLogging(taskHandle_save1,"D:\\temp\\temp1.tdms", DAQmx_Val_LogAndRead, "GroupName", DAQmx_Val_OpenOrCreate);
}
//设置通道参数
void Widget::setChannel()
{
    /*********************************************/
    // DAQmx Configure Code
    /*********************************************/
    DAQmxCreateTask("",&taskHandle);
    //测量数字信号DAQmxCreateDIChan
    DAQmxCreateAIVoltageChan(taskHandle, device, "", DAQmx_Val_Cfg_Default, -30.0, 30.0, DAQmx_Val_Volts, NULL);
    DAQmxCfgSampClkTiming(taskHandle, "", 1000.0, DAQmx_Val_Rising, DAQmx_Val_ContSamps, 10000);
    DAQmxRegisterEveryNSamplesEvent(taskHandle, DAQmx_Val_Acquired_Into_Buffer, 100, 0, EveryNCallback, NULL);
    // DAQmx Configure Code
    /*********************************************/
    DAQmxCreateTask("",&taskHandle1);
    DAQmxCreateAIVoltageChan(taskHandle1, device1, "", DAQmx_Val_Cfg_Default, -5.0, 5.0, DAQmx_Val_Volts, NULL);
    DAQmxCfgSampClkTiming(taskHandle1, "", 1000.0, DAQmx_Val_Rising, DAQmx_Val_ContSamps, 10000);
    DAQmxRegisterEveryNSamplesEvent(taskHandle1, DAQmx_Val_Acquired_Into_Buffer, 100, 0, EveryNCallback1, NULL);
    /*********************************************/
    DAQmxCreateTask("",&taskHandlectr);
    DAQmxCreateCICountEdgesChan(taskHandlectr, device2, "", DAQmx_Val_Rising, 0, DAQmx_Val_CountUp);
}
//添加时间数据
void Widget::addTimedata()
{
    // int temp=(int)(sampletotal>sampletotal1?sampletotal:sampletotal1)
    //            -sampletotaltime*(int)(sampletotal>sampletotal1?sampletotal:sampletotal1/sampletotaltime);//时间空缺总数量
    // int l=0;
    // for(int j=0;j<sampletotaltime;j++)
    // {
    //     bool key=1;//填补小数时间空缺标志位
    //     for(int i=0;i<(int)(sampletotal>sampletotal1?sampletotal:sampletotal1/sampletotaltime);i++)
    //     {
    //         if((j%(sampletotaltime/temp)==0&&l<temp)&&key==1)//均匀插入时间空缺值
    //         {
    //             i--;
    //             l++;
    //             key=0;
    //             // qDebug()<<j+1;//填补时间值空缺值
    //         }
    //         timedata[i+l+j*(int)(sampletotal>sampletotal1?sampletotal:sampletotal1/sampletotaltime)]=j+1;
    //     }
    // }
    for(int i=1;i<=sampletotal;i++)
        timedata[i-1]=i;
    DDC_SetDataValues(Time[0],timedata,sampletotaltime);
    //cDAQ1Mod2/ai0:2通道保存数据显示
    DDC_SetDataValues(channels[1], data_temp1, sampletotaltime);
    DDC_SetDataValues(channels[2], data_temp2, sampletotaltime);
    DDC_SetDataValues(channels[3], data_temp3, sampletotaltime);
    //cDAQ1Mod1/ai1通道保存数据显示
    DDC_SetDataValues(channels[0], data_temp, sampletotaltime);
    DDC_SaveFile(file);
    DDC_CloseFile(file);
}



